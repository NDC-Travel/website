generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  password           String?
  phone              String?
  image              String?
  emailVerified      DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  address            String?
  accounts           Account[]
  contactOf          Contact[]            @relation("TargetContacts")
  contacts           Contact[]            @relation("OwnerContacts")
  receivedMessages   Message[]            @relation("ReceivedMessages")
  sentMessages       Message[]            @relation("SentMessages")
  Notification       Notification[]
  packages           Package[]
  PasswordResetToken PasswordResetToken[]
  sessions           Session[]
  transport          Transport[]
  review          Review[]
}

model Contact {
  id        String   @id @default(cuid())
  userId    String
  contactId String
  createdAt DateTime @default(now())
  contact   User     @relation("TargetContacts", fields: [contactId], references: [id])
  user      User     @relation("OwnerContacts", fields: [userId], references: [id])

  @@unique([userId, contactId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
}

model Notification {
  id        String    @id @default(cuid())
  targetId  String?
  title     String
  content   String
  createdAt DateTime  @default(now())
  readAt    DateTime?
  user      User?     @relation(fields: [targetId], references: [id])
}

model NewsletterSubscriber {
  id         String    @id @default(cuid())
  email      String    @unique
  createdAt  DateTime  @default(now())
  verified   Boolean   @default(false)
  verifiedAt DateTime?
}

model ContactMessage {
  id        String   @id @default(cuid())
  fullName  String
  email     String
  message   String
  createdAt DateTime @default(now())
}

model Transport {
  id                    String   @id @default(cuid())
  userId                String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  destination           String
  isRoundTrip           Boolean  @default(false)
  meansTransport        String
  origin                String
  outboundArrivalDate   String
  outboundDepartureDate String
  paymentPeriod         String
  pricePerKg            String
  returnArrivalDate     String?
  returnDepartureDate   String?
  tripDescription       String?
  weightAvailable       String
  user                  User     @relation(fields: [userId], references: [id])
}

model Package {
  id                     String   @id @default(cuid())
  userId                 String
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  destination            String
  origin                 String
  packageContents        String
  width                  String
  height                 String
  length                 String
  weight                 String
  rating                 String @default("0")
  participationAllowance String
  shippingDeadline       String
  parcelDetails          String
  imageUrl               String?
  imageKey               String?
  status                 String   @default("active")
  user                   User     @relation(fields: [userId], references: [id])
  review          Review[]
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  userId    String
  packageId String

  user      User     @relation(fields: [userId], references: [id])
  package   Package  @relation(fields: [packageId], references: [id])
}
